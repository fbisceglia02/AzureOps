name: AKS with ALB Controller deployment
#comment
on:
  workflow_dispatch:
    inputs:
        resource-group-name:
          type: string
          required: false
          description: 'Name of the resource group where aks will be created'
        aks-name:
          type: string
          required: false
          description: 'Name of the aks will be created'

jobs:
  create-rg:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Azure Custom Login
        shell: bash
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZ_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
      - name: Setup Variables
        shell: bash
        run: |
          echo "RESOURCE_GROUP=${{ github.event.inputs.resource-group-name || 'ic-aks-rg' }}" >> $GITHUB_ENV

          echo "AKS_NAME=${{ github.event.inputs.aks-name || 'ic-aks' }}" >> $GITHUB_ENV

          echo "SUBSCRIPTION_ID=${{ 'c550fb2d-3f43-40b7-9e36-f1d47f436e42' }}" >> $GITHUB_ENV

          echo "IDENTITY_RESOURCE_NAME=${{ 'azure-alb-identity' }}" >> $GITHUB_ENV

          echo "HELM_NAMESPACE=${{ github.event.inputs.aks-name || 'ic-aks' }} >> $GITHUB_ENV

          CONTROLLER_NAMESPACE=${{ 'azure-alb-system' }} >> $GITHUB_ENV

      - name: Deploy resource group and AKS
        shell: bash
        run: |
          az group create --name $RESOURCE_GROUP --location eastus  
          az aks create -n $AKS_NAME -g $RESOURCE_GROUP -l eastus --generate-ssh-keys
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing         

      - name: Register azure account and required resource providers
        shell: bash
        run: |
          az account set --subscription $SUBSCRIPTION_ID

          # Register required resource providers on Azure.
          az provider register --namespace Microsoft.ContainerService
          az provider register --namespace Microsoft.Network
          az provider register --namespace Microsoft.NetworkFunction
          az provider register --namespace Microsoft.ServiceNetworking

          # Install Azure CLI extensions.
          az extension add --name alb

      - name: Deploy Application Gateway for Containers ALB Controller
        shell: bash
        run: |
          echo "Setting up an existing cluster as workload"
          az aks update -g $RESOURCE_GROUP -n $AKS_NAME --enable-oidc-issuer --enable-workload-identity --no-wait

          # Install the ALB controller
          {

              # 1. Create a user managed identity for ALB controller and federate the identity as workload identity to use in the AKS cluster
              {
                  mcResourceGroup=$(az aks show --resource-group $RESOURCE_GROUP --name $AKS_NAME --query "nodeResourceGroup" -o tsv)
                  mcResourceGroupId=$(az group show --name $mcResourceGroup --query id -otsv)

                  echo "Creating identity $IDENTITY_RESOURCE_NAME in resource group $RESOURCE_GROUP"
                  az identity create --resource-group $RESOURCE_GROUP --name $IDENTITY_RESOURCE_NAME
                  principalId="$(az identity show -g $RESOURCE_GROUP -n $IDENTITY_RESOURCE_NAME --query principalId -otsv)"

                  echo "Waiting 60 seconds to allow for replication of the identity..."
                  sleep 60

                  echo "Apply Reader role to the AKS managed cluster resource group for the newly provisioned identity"
                  az role assignment create --assignee-object-id $principalId --assignee-principal-type ServicePrincipal --scope $mcResourceGroupId --role "acdd72a7-3385-48ef-bd42-f606fba81ae7" # Reader role

                  echo "Set up federation with AKS OIDC issuer"
                  AKS_OIDC_ISSUER="$(az aks show -n "$AKS_NAME" -g "$RESOURCE_GROUP" --query "oidcIssuerProfile.issuerUrl" -o tsv)"
                  az identity federated-credential create --name "azure-alb-identity" \
                      --identity-name "$IDENTITY_RESOURCE_NAME" \
                      --resource-group $RESOURCE_GROUP \
                      --issuer "$AKS_OIDC_ISSUER" \
                      --subject "system:serviceaccount:azure-alb-system:alb-controller-sa"
              }

              # Install ALB Controller using Helm
              {
                  az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME
                  helm install alb-controller oci://mcr.microsoft.com/application-lb/charts/alb-controller --namespace $HELM_NAMESPACE --version 1.0.2 --set albController.namespace=$CONTROLLER_NAMESPACE --set albController.podIdentity.clientID=$(az identity show -g $RESOURCE_GROUP -n azure-alb-identity --query clientId -o tsv)
              }

          }

          # Verify ALB Controller installation
          {

              echo "getting cluster credentials"
              az aks get-credentials -n $AKS_NAME -g $RESOURCE_GROUP

              kubectl get pods -n azure-alb-system && sleep 5                        # Verify the ALB Controller pods are ready

              kubectl get gatewayclass azure-alb-external -o yaml && sleep 5         # Verify GatewayClass azure-application-lb is installed on your cluster:
          }
